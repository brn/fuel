(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Fuel = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * @fileoverview
 * @author Taketoshi Aono
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var generator = _dereq_(2);
var transformers = generator.transformers;
var Generator = generator.Generator;
var g = new Generator();
g.addGroup([500], [
    [transformers.reverse]
]);
window['generateBenchmarkData'] = function (config) {
    return {
        units: g.generate()
    };
};
// g.addGroup([500], [
//   [transformers.reverse],
//   [transformers.shuffle],
//   [transformers.insertFirst],
//   [transformers.insertLast],
//   [transformers.removeFirst],
//   [transformers.removeLast],
//   [transformers.moveFromEndToStart],
//   [transformers.moveFromStartToEnd]
// ]);
// g.addGroup([50, 10], [
//   [transformers.reverse, transformers.skip],
//   [transformers.shuffle, transformers.skip],
//   [transformers.insertFirst, transformers.skip],
//   [transformers.insertLast, transformers.skip],
//   [transformers.removeFirst, transformers.skip],
//   [transformers.removeLast, transformers.skip],
//   [transformers.moveFromEndToStart, transformers.skip],
//   [transformers.moveFromStartToEnd, transformers.skip]
// ]);
// g.addGroup([5, 100], [
//   [transformers.reverse, transformers.skip],
//   [transformers.shuffle, transformers.skip],
//   [transformers.insertFirst, transformers.skip],
//   [transformers.insertLast, transformers.skip],
//   [transformers.removeFirst, transformers.skip],
//   [transformers.removeLast, transformers.skip],
//   [transformers.moveFromEndToStart, transformers.skip],
//   [transformers.moveFromStartToEnd, transformers.skip]
// ]);

},{"2":2}],2:[function(_dereq_,module,exports){
'use strict';

var generator = _dereq_(3);

module.exports = {
  Generator: generator.Generator,
  createNode: generator.createNode,
  NodeFlags: _dereq_(4),
  transformers: _dereq_(5)
};

},{"3":3,"4":4,"5":5}],3:[function(_dereq_,module,exports){
'use strict';

function createNode(key, flags, children) {
  if (flags === void 0) flags = 0;
  if (children === void 0) children = null;

  return {
    key: key,
    flags: 0,
    children: children
  };
}

function generateNodes(nodes, transformers, depth) {
  if (transformers === void 0) transformers = null;
  if (depth === void 0) depth = 0;

  var i;
  var result = [];
  var count = nodes[depth];

  if (depth === (nodes.length - 1)) { // max depth
    for (i = 0; i < count; i++) {
      result.push(createNode(i, 0, null));
    }
  } else {
    for (i = 0; i < count; i++) {
      result.push(createNode(i, 0, generateNodes(nodes, transformers, depth + 1)));
    }
  }

  if (transformers != null) {
    transformers[depth].fn(result);
  }

  return result;
}

function Generator() {
  this.groups = [];
}

Generator.prototype.addGroup = function(nodes, transformers) {
  this.groups.push({
    nodes: nodes,
    transformers: transformers
  });
};

Generator.prototype.generate = function() {
  var i, j;
  var group;
  var transformers;
  var a, b;
  var namePrefix;
  var units = [];

  for (i = 0; i < this.groups.length; i++) {
    group = this.groups[i];
    a = generateNodes(group.nodes);
    namePrefix = JSON.stringify(group.nodes) + ' ';

    for (j = 0; j < group.transformers.length; j++) {
      transformers = group.transformers[j];
      b = generateNodes(group.nodes, transformers);

      units.push({
        name: namePrefix + JSON.stringify(transformers.map(function(t) { return t.name; })),
        data: {
          a: a,
          b: b
        }
      });
    }
  }

  return units;
};

module.exports = {
  Generator: Generator,
  createNode: createNode
};

},{}],4:[function(_dereq_,module,exports){
'use strict';

module.exports = {
  component: 1,
  style: 1 << 1,
  attribute: 1 << 2,
  classes: 1 << 3
};

},{}],5:[function(_dereq_,module,exports){
'use strict';

var createNode = _dereq_(3).createNode;

var skip = {
  name: 'skip',
  fn: function(c) {}
};

var reverse = {
  name: 'reverse',
  fn: function(c) { c.reverse(); }
};

var shuffle = {
  name: 'shuffle',
  fn: function(c) {
    var i = c.length;
    var r;
    var tmp;

    while (i !== 0) {
      r = Math.floor(Math.random() * (i--));

      tmp = c[i];
      c[i] = c[r];
      c[r] = tmp;
    }
  }
};

function insertFirst(n) {
  return {
    name: 'insertFirst(' + n.toString() + ')',
    fn: function (c) {
      for (var i = 0; i < n; i++) {
        c.unshift(createNode(c.length));
      }
    }
  };
};

function insertLast(n) {
  return {
    name: 'insertLast(' + n.toString() + ')',
    fn: function (c) {
      for (var i = 0; i < n; i++) {
        c.push(createNode(c.length));
      }
    }
  };
};

function removeFirst(n) {
  return {
    name: 'removeFirst(' + n.toString() + ')',
    fn: function (c) {
      for (var i = 0; i < n; i++) {
        c.shift();
      }
    }
  };
}

function removeLast(n) {
  return {
    name: 'removeLast(' + n.toString() + ')',
    fn: function (c) {
      for (var i = 0; i < n; i++) {
        c.pop();
      }
    }
  };
}

function moveFromEndToStart(n) {
  return {
    name: 'moveFromEndToStart(' + n.toString() + ')',
    fn: function (c) {
      for (var i = 0; i < n; i++) {
        c.unshift(c.pop());
      }
    }
  };
}

function moveFromStartToEnd(n) {
  return {
    name: 'moveFromStartToEnd(' + n.toString() + ')',
    fn: function (c) {
      for (var i = 0; i < n; i++) {
        c.push(c.shift());
      }
    }
  };
}

module.exports = {
  skip: skip,
  reverse: reverse,
  shuffle: shuffle,
  insertFirst: insertFirst,
  insertLast: insertLast,
  removeFirst: removeFirst,
  removeLast: removeLast,
  moveFromEndToStart: moveFromEndToStart,
  moveFromStartToEnd: moveFromStartToEnd
};

},{"3":3}]},{},[1])(1)
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
